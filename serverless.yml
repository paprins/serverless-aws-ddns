service: serverless-aws-ddns

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  memorySize: 128
  timeout: 30
  logRetentionInDays: 7
  logs:
    restApi: false
  deploymentBucket:
    name: ${self:custom.config.deployment_bucket}
    serverSideEncryption: AES256

plugins:
  - serverless-deployment-bucket
  - serverless-python-requirements
  - serverless-iam-roles-per-function
  - serverless-domain-manager

package:
  individually: true
  patterns:
    - '!**'

custom:
  config: ${file(vars/${self:provider.stage}.yml)}
  pythonRequirements:
    dockerizePip: true
    slim: true
  customDomain:
    domainName: ${self:custom.config.custom_domain}
    stage: ${self:provider.stage}
    certificateName: ${self:custom.config.certificate_name}
    createRoute53Record: true
    endpointType: 'regional'
    securityPolicy: tls_1_2

functions:
  authorizer:
    handler: authorizer.lambda_handler
    module: auth
    name: ${self:service}-${self:provider.stage}-authorizer
    description: Serverless DDNS authorizer
    environment:
      LOG_LEVEL: ${self:custom.config.log_level}
      POWERTOOLS_SERVICE_NAME: ${self:service}-authorizer
      SECRET_KEY: ${self:custom.config.secret_key}
    layers:
      -  arn:aws:lambda:${aws:region}:017000801446:layer:AWSLambdaPowertoolsPython:26
    package:
      patterns:
        - auth/**

  ddns:
    handler: index.lambda_handler
    module: ddns
    name: ${self:service}-${self:provider.stage}-handler
    description: Serverless DDNS handler
    environment:
      LOG_LEVEL: ${self:custom.config.log_level}
      POWERTOOLS_SERVICE_NAME: ${self:service}
      ROUTE_53_ZONE_ID: ${self:custom.config.route_53.zone_id}
      ROUTE_53_ZONE_NAME: ${self:custom.config.route_53.zone_name}
    events:
      -
        http:
          path: /update
          method: GET
          cors: true
          authorizer: authorizer
    iamRoleStatements:
      - Effect: "Allow"        
        Action: 
          - route53:List*
        Resource: arn:aws:route53:::hostedzone/*
      -
        Effect: "Allow"
        Action:
          - "route53:ChangeResourceRecordSets"
        Resource: "arn:aws:route53:::hostedzone/${self:custom.config.route_53.zone_id}"
    layers:
      -  arn:aws:lambda:${aws:region}:017000801446:layer:AWSLambdaPowertoolsPython:26
    package:
      patterns:
        - ddns/**

resources:
  Resources:
    ApiGatewayRestApi:
      Type: "AWS::ApiGateway::RestApi"
      Properties:
        Description: Serverless DDNS API for ${self:provider.stage} environment
        Name: ${self:service}-${self:provider.stage}

    AuthorizerApiGatewayAuthorizer:
      Type: "AWS::ApiGateway::Authorizer"
      Properties:
        AuthorizerResultTtlInSeconds: 0
        IdentitySource: method.request.querystring.token
        Name: APIAuthorizer
        RestApiId:
          Ref: "ApiGatewayRestApi"
        Type: REQUEST